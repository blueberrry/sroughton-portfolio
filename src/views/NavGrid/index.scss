@import '../../root.scss';

$animation-duration: 600;

// transition delays (ms)
$animation-delays: 250, 500, 750, 1000, 1250, 1500;

$last-animation-delay: nth($animation-delays, length($animation-delays));

// todo: scss?

@keyframes fadeHideBlock {
  from {
    opacity: 1;
    display: block;
  }
  to {
    opacity: 0;
    display: none;
  }
}

@keyframes fadeShowBlock {
  0% {
    opacity: 0;
    display: none;
  }
  1% {
    display: block;
  }
  to {
    opacity: 1;
    display: block;
  }
}

@keyframes fadeHideGrid {
  from {
    display: grid;
    opacity: 1;
  }
  to {
    opacity: 0;
    // display: none;
  }
}

@keyframes fadeShowGrid {
  0% {
    // display: none;
    opacity: 0;
  }
  1% {
    display: grid;
  }
  100% {
    opacity: 1;
    display: grid;
  }
}

@keyframes spanItem {
  0% {
    opacity: 1;
  }

  25% {
    opacity: 1;
  }

  75% {
    // grid-column: 1 / -1; // span entire grid
    // grid-row: 1 / 6; // span
    opacity: 0;
  }
  100% {
    opacity: 0;
    // grid-column: 1 / -1;
    // grid-row: 1 / -6;
  }
}

// todo: reverse collapse item:
// @keyframes collapseItem {
//   0% {
//     opacity: 1;
//     grid-column: 1 / -1; // span entire grid
//     grid-row: 1 / -1; // span
//     width: 100%;
//   }

//   25% {
//     opacity: 0;
//   }

//   75% {
//     grid-column: unset; // span entire grid
//     grid-row: unset; // span
//   }
//   100% {
//     opacity: 1;
//     grid-column: unset;
//     grid-row: unset;
//   }
// }

nav.nav-container {
  //position: fixed;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: $spcr-md;
  display: flex;
  justify-content: center;
  align-items: center;
  // background: url(https://picsum.photos/g/1921/1081?random) top center;

  // background-repeat: no-repeat;

  // background-size: 100%;
  //margin-top: -7rem;
  //height: 100vh;

  @each $theme, $value in $themes {
    // applies bg to nav container on hover
    &.theme-#{$theme} {
      @extend .#{$value};
    }
  }

  &.to-title {
    > ul.nav-list-container {
      // transition out last
      animation: fadeHideGrid #{$animation-duration}ms ease-out #{$last-animation-delay + 250}ms;
      animation-fill-mode: forwards;
      // transition in first
    }
  }

  > ul.nav-list-container {
    // @include btn-grid-lr;
    // width: 800px;
    // height: 600px;
    // max-width: 47rem;
    // margin: 0 auto;
    background-color: transparent; // todo: should always have colour

    // animation: fadeShowGrid #{$animation-duration}ms ease-in 10ms;
    // animation-fill-mode: forwards;

    > li.item-auto {
      &.active {
        border: 2px solid red;
      }

      &.active-transition-in {
        animation: spanItem #{$animation-duration}ms ease-in #{$last-animation-delay}ms;
        // todo: backwards doesn't work as desired
        animation-fill-mode: backwards;
      }

      &.active-transition-out {
        animation: spanItem #{$animation-duration}ms ease-in #{$last-animation-delay}ms;
        animation-fill-mode: forwards;
      }

      @each $delay in $animation-delays {
        &.transitioning-out-#{$delay}ms {
          // opacity: 0;
          animation: fadeHideBlock #{$animation-duration}ms ease-out #{$delay}ms;
          animation-fill-mode: forwards;
        }
      }

      &.full {
        opacity: 0; // final opacity when transitioning/initial for reverse
        display: block;
        @each $delay in $animation-delays {
          &.transitioning-in-#{$delay}ms {
            animation: fadeShowBlock #{$animation-duration}ms ease-out #{$delay}ms;
            animation-fill-mode: forwards;
          }
        }
      }

      // Loop through the transition durations

      // react-router-dom NavLink
      a.nav-link-content {
        display: block;
        width: 100%;
        height: 100%;
        background: transparent;
      }
    }
  }
}
