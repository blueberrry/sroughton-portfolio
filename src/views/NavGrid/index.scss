@import '../../root.scss';

$last-animation-delay: nth($animation-delays, length($animation-delays));

// todo: scss function for keyframes
@keyframes fadeHideBlock {
  from {
    opacity: 1;
    display: block;
  }
  to {
    opacity: 0;
    display: none;
  }
}

@keyframes fadeShowBlock {
  0% {
    opacity: 0;
    display: none;
  }
  1% {
    display: block;
  }
  to {
    opacity: 1;
    display: block;
  }
}

@keyframes fadeHideGrid {
  from {
    display: grid;
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes fadeShowGrid {
  0% {
    // display: none;
    opacity: 0;
  }
  1% {
    display: grid;
  }
  100% {
    opacity: 1;
    display: grid;
  }
}

@keyframes spanItem {
  0% {
    opacity: 1;
  }

  25% {
    opacity: 1;
  }

  75% {
    // changed to fade but could be used if the item needs to span the grid

    // grid-column: 1 / -1; // span entire grid
    // grid-row: 1 / 6; // span
    opacity: 0;
  }
  100% {
    opacity: 0;
    // grid-column: 1 / -1;
    // grid-row: 1 / -6;
  }
}

nav.nav-container {
  max-width: 52rem;
  max-height: 100%;
  aspect-ratio: 1 / 1;
  margin: 0 auto;
  padding: $spcr-md;

  @include defaultTransition;

  @each $theme, $value in $themes {
    // applies bg colour to header on navigation event
    @include theme-bg($theme, $value);
  }

  // @each $theme, $img in $theme-images {
  //   // applies bg colour to header on navigation event
  //   &.theme-#{$theme} {
  //     @extend .theme-img-#{$img};
  //   }
  // }

  &.to-title {
    > ul.nav-list-container {
      // transition out last
      animation: fadeHideGrid #{$animation-duration}ms ease-out #{$last-animation-delay + 250}ms;
      animation-fill-mode: forwards;
      // transition in first
    }
  }

  > ul.nav-list-container {
    // @include btn-grid-lr;
    // width: 800px;
    // height: 600px;
    // max-width: 47rem;
    // margin: 0 auto;
    background-color: transparent; // todo: should always have colour

    > li.item-auto {
      &.item-active {
        border: 2px solid red;
      }

      &.item-disabled {
        pointer-events: none;
      }

      &.active-transition-in {
        animation: spanItem #{$animation-duration}ms ease-in #{$last-animation-delay}ms;
        // todo: backwards doesn't work as desired
        animation-fill-mode: backwards;
      }

      &.active-transition-out {
        animation: spanItem #{$animation-duration}ms ease-in #{$last-animation-delay}ms;
        animation-fill-mode: forwards;
      }

      @each $delay in $animation-delays {
        &.transitioning-out-#{$delay}ms {
          // opacity: 0;
          animation: fadeHideBlock #{$animation-duration}ms ease-out #{$delay}ms;
          animation-fill-mode: forwards;
        }
      }

      &.full {
        opacity: 0; // final opacity when transitioning/initial for reverse
        display: block;
        @each $delay in $animation-delays {
          &.transitioning-in-#{$delay}ms {
            animation: fadeShowBlock #{$animation-duration}ms ease-out #{$delay}ms;
            animation-fill-mode: forwards;
          }
        }
      }

      // Loop through the transition durations

      // react-router-dom NavLink
      a.nav-link-content {
        display: block;
        width: 100%;
        height: 100%;
        background: transparent;
      }
    }
  }
}
